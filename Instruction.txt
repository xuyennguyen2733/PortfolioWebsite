I. Getting Started

1. Generate the project:
 - In the terminal:
 
    RUN `ng new [project_name] --no-standalone`
    
    -> choose SCSS if using Material UI theme
    -> Server side rendering option
    
- Best make the project_name folder the git repo to make it easier for deploying

2. Install Material UI
- In the terminal:

    RUN `ng add @angular/material`
    
- Choose the desired theme (rose/red for this project)
    
- Then, to generate custom theme:
    
    RUN `ng generate @angular/material:m3-theme`
    
3. Specify build folder

To deploy to GitHub, the build folder must be in the folder named docs or dist.

To deploy to other server, the built index.html should still be in the top level of the build folder.

- Go to angular.json
- Look for build, then options, then outputPath
- Replace `"outputPath": ...` with the outputPath object
    `
        "outputPath": {
            "base": "docs/",
            "browser": ""
        },
    `
    
II. Starting to code

1. Replace built-in code with your own

- Go to app.component.html
- Replace everything with just `<h1>Portfolio</h1>`
- Run `ng serve` and go to the local url provided
- You should see the result of your change

2. Create a component

- Command: `ng g c [component-name]`
-> g stands for generate
-> c stands for component

- Create a top nav component inside the components folder
    
    RUN `ng g c components/top-nav`
    
- In app.module.ts, you should see TopNavComponent is already imported and added to the declarations field

- The component is used as the tag <app-top-nav></app-top-nav>
- The tag is the place holder for what ever is rendered in the file top-nav.component.html

3. Implementing the top-nav

Let's create a horizontal panel across the top of the page using the component mat-toolbar

- In app.module.ts, import MatToolbarModule

    `import {MatToolbarModule} from '@angular/material/toolbar';`
    
- Add MatToolbarModule to the imports list

- In top-nav.component.html and replace the content in it with

    `<mat-toolbar></mat-toolbar>`
    
- In app.component.html, make sure the component app-top-nav is the first component

- Go to the browser to see the result

Since the default theme color isn't the shade I like, I customized it by creating a file named theme.scss in the same folder as style.scss, then declare it as one of the styles in angular.json (together with style.scss)

4. Implementing theme change:

This feature is mainly used for changing to dark mode or light mode

    Step 1: Define a dark theme
    - In rose-red.scss, 
    
        -under the defined $theme, define a dark theme a similar manner, but use "dark" for theme-type
    
            $dark-theme: mat.define-theme(
                (
                    color: (
                        theme-type: dark,
                        primary: mat.$rose-palette,
                        tertiary: mat.$rose-palette,
                    ),
                )
            );
        
        - under the class :root, create another class, say ".dark-theme", with the following settings:
        
             // Add a class for dark theme
            .dark-theme {
                @include mat.color-variants-backwards-compatibility($dark-theme);
                @include app-theme.theme($dark-theme);
                @include mat.all-component-themes($dark-theme)
            }
            
        - (Optional) replace the class :root with this class:
        
            // Add a class for dark theme
            .light-theme {
                @include mat.color-variants-backwards-compatibility($light-theme);
                @include app-theme.theme($light-theme);
                @include mat.all-component-themes($light-theme)
            }
            
            Where $light-theme is defined identical to $theme
            
    Step 2: Create a theme service
    - In the terminal,
    
        RUN ng g s services/theme
    
        To create a theme service in the folder services
    
    - Navigate the file theme.service.ts, and add this following content to it:
    
        import { Injectable, signal } from '@angular/core';


        @Injectable({
        providedIn: 'root'
        })
        export class ThemeService {
            themeSignal = signal<string>("dark-theme"); // pick any available theme
            
            updateTheme() {
                this.themeSignal.update(value => value === "dark-theme" ? "light-theme" : "dark-theme" );
            }
        }
      
    Step 3: Inject and use the service's functions to set/switch themes  
    - In app.component.ts, inject the theme service:
    
        themeService: ThemeService = inject(ThemeService)    
        
    - Apply the default theme
        - Now, you can use the functions from ThemeService inside app.component.html
        - In app.component.html, add the attribute `[ngClass]="themeService.themeSignal()"` to any parent tag whose children you want to apply the theme on.
        - Example:
        
            <div [ngClass]="themeService.themeSignal()">
                [everything under here will adopt the theme]
            </div>
            
        - By this step, your app should adopt whichever theme set as default to themeSignal. In this case, it's the dark-theme.
    
    - Create a theme switching component
        - This could be anything from a <button> to a <div> with a click event set to updateTheme()
        - Example:
        
            <button mat-icon-button (click)="themeService.updateTheme()">toggle dark mode</button>
    
        - Now, Clicking the button should change the signal between "dark-theme" and "light-theme" which will set the class of your component to be ".dark-theme" or ".light-theme", hence switching between dark and light modes.
        
    - Some colors may not look right in light or dark modes. Don't panic. Navigate the component with the off color. Then, in the correct theme file, set it to a color from your theme palette using mat.get-theme-color. Avoid hard-coding a specific color like 'white', '#2D3AAA', etc. because they won't change when themes change.
        
    CONGRATULATIONS! You've implemented a theme picker!

III. Troubleshoot

1. Button UI not applied

Symptom: using the tag <button> doesn't yield the UI effect like shown in the document

Solution:
- Import the module MatButtonModule in app.module.ts
- This module allows you to use the <button> tag like normal, but with a layer of material ui on top
- Another use is to have the attribute mat-button in the tag

2. Active button not changing colors

Symptom: When a button is active (using routerLinkActive or other methods), it doesn't adopt the style specified for active button, ex. `.active: {background-color: [color]}`

Solution (could have better ones):
- Use scss
- styles.scss refers to app-theme.scss (see code)
- app-theme.scss registers all component-wise theme (using @include)
- Each component needs a theme (for top-nav, it's top-nav-theme.scss)

3. Cannot get round button

Symptom: The button isn't round even though its content is a small icon. Even when the style is set so that width == height, the button's width is always longer.

Solution:

- Make sure the button attribute is `mat-icon-button` instead of `mat-button`

    <button mat-icon-button><mat-menu>menu</mat-menu></button>

4. ERROR RuntimeError: NG0100: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked

Symptom: when updating the grid ratio when window is resized, this error appeared in the console. If resize the grid ratio based on the size of the mat-card-content element, the resizing is delayed.

Solution:

- use ChangeDetectorRef to initiate change detection anytime rowHeight is change.

5. Themes not applied to :root

Symptom: certain components (pop-up-image) aren't applied theme because we removed the root styling:

    :root {
        @include mat.all-component-themes($dark-theme); // theme must match the default themeSignal
    }

Solution:

- Put the root component back
- Navigate the .ts file where you implement the logic of the theme switching button (top-nav.components.ts in this case)
- For the theme switching function (toggleTheme() in this case), do something like this

    toggleTheme() {
        // line 1
        const documentElement = document.querySelector(':root')
        // line 2
        documentElement?.classList.remove(this.themeService.themeSignal())
        // line 3
        this.themeService.updateTheme()
        // line 4
        documentElement?.classList.add(this.themeService.themeSignal())
    } 
    
- Explain: the theme class needs to be added to the root component.
    - Line 1 retrieves the root component
    - Line 2 removes the current theme class from the root
    - Line 3 switches to the opposite theme
    - Line 4 adds the new theme class to the root
    
- This way, *every single* component in your website will be applied the theme. There will be no need for a parent tag wrapping everything up in app.component.html